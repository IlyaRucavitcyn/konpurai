/**
 * Generates a markdown report for model inventory
 * @param tenant - The tenant identifier for the organization
 * @param data - Project metadata including organization name and owner
 * @returns Promise<string> - Markdown formatted model inventory report
 */

import { ReportBodyData } from "../reportService";
import { getModelByTenantIdQuery } from "../../utils/modelInventory.utils";
import { getUserByIdQuery } from "../../utils/user.utils";
import { getAllModelRisksQuery } from "../../utils/modelRisk.utils";

export async function getModelReportMarkdown(
    data: ReportBodyData,
    tenant: string
): Promise<string> {
    const modelReportData = await getModelReportData(tenant);
    const modelRisksReportData = await getModelRisksReportData(tenant);

    const markdown = `
${data.organizationName || "VerifyWise"} model inventory report
========================

This report is generated by the VerifyWise Model Inventory. It aims to provide a way to demonstrate all AI/LLM models and their associated risks within your organization.

- **Date** ${new Date().toLocaleDateString()}
- **Owner** ${data.projectOwner}

${modelReportData}

${modelRisksReportData}
`;
    return markdown;
}

export async function getModelReportData(
    tenant: string
): Promise<string> {
    let modelRows: string = ``;
    try {
        const modelData = await getModelByTenantIdQuery(tenant);
        modelRows = modelData && modelData.length > 0 ? await Promise.all(modelData.map(async (model) => {
            const modelApprover = await getUserByIdQuery(Number(model.approver));
            return `| ${model.provider} | ${model.model} | ${model.version} | ${modelApprover.name} ${
              modelApprover.surname
              } | ${model.capabilities} | ${model.security_assessment} | ${model.status} | ${model.status_date.toLocaleDateString()} |`;
            })
          ).then((rows) => rows.join("\n")) : "| - | - | - | - | - | - | - | - |";
    } catch (error) {
        throw new Error(`Error while fetching the model report data`);
    }
    return `
Model table
-------------
  | Provider | Model | Version | Approver | Capabilities | Security Assessment | Status | Status Date |
|----|----|----|----|----|----|----|----|
${modelRows}
`;
}

export async function getModelRisksReportData(
    tenant: string
): Promise<string> {
    let modelRisksRows: string = ``;
    try {
        const modelRisksData = await getAllModelRisksQuery(tenant);
        modelRisksRows = modelRisksData && modelRisksData.length > 0 ? await Promise.all(modelRisksData.map(async (modelRisk) => {
            const modelRiskOwner = await getUserByIdQuery(Number(modelRisk.owner));
            return `| ${modelRisk.risk_name} | ${modelRisk.risk_level} | ${modelRisk.status} | ${modelRiskOwner.name} ${modelRiskOwner.surname} |`;
        })).then((rows) => rows.join("\n")) : "| - | - | - | - |";
    } catch (error) {
        throw new Error(`Error while fetching the model risks report data`);
    }
    return `Model risks report
-------------
| Risk Name | Risk Level | Status | Owner |
|----|----|----|----|
${modelRisksRows}
`;
}